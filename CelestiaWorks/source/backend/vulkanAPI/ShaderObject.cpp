#include "ShaderObject.h"
#include "backend/utils/Utils.h"
#include "backend/vulkanAPI/Device.h"

celestia::ShaderObject::ShaderObject()
	:pushConstants({})
{
}

celestia::ShaderObject::~ShaderObject()
{
	for (VkShaderModule& shader : shaderModules)
	{
		vkDestroyShaderModule(Device::context.device, shader, nullptr);
	}

	shaderModules.clear();
}


static const std::vector<uint32_t> getDefaultShaders(celestia::ShaderType shader)
{
	if (shader == celestia::ShaderType::VERTEX_SHADER)
	{
		const std::vector<uint32_t> vertexBinary = { 0x07230203,0x00010000,0x0008000b,0x00000035,0x00000000,0x00020011,0x00000001,0x0006000b,
			0x00000001,0x4c534c47,0x6474732e,0x3035342e,0x00000000,0x0003000e,0x00000000,0x00000001,
			0x000d000f,0x00000000,0x00000004,0x6e69616d,0x00000000,0x0000000d,0x00000019,0x00000024,
			0x00000025,0x00000029,0x0000002b,0x0000002e,0x00000030,0x00030003,0x00000002,0x000001c2,
			0x00040005,0x00000004,0x6e69616d,0x00000000,0x00060005,0x0000000b,0x505f6c67,0x65567265,
			0x78657472,0x00000000,0x00060006,0x0000000b,0x00000000,0x505f6c67,0x7469736f,0x006e6f69,
			0x00070006,0x0000000b,0x00000001,0x505f6c67,0x746e696f,0x657a6953,0x00000000,0x00070006,
			0x0000000b,0x00000002,0x435f6c67,0x4470696c,0x61747369,0x0065636e,0x00070006,0x0000000b,
			0x00000003,0x435f6c67,0x446c6c75,0x61747369,0x0065636e,0x00030005,0x0000000d,0x00000000,
			0x00050005,0x00000011,0x68737570,0x756c6156,0x00007365,0x00060006,0x00000011,0x00000000,
			0x6a6f7270,0x69746365,0x00006e6f,0x00060005,0x00000013,0x68737570,0x736e6f43,0x746e6174,
			0x00000073,0x00050005,0x00000019,0x69736f70,0x6e6f6974,0x00000000,0x00060005,0x00000024,
			0x67617266,0x43786554,0x64726f6f,0x00000000,0x00050005,0x00000025,0x43786574,0x64726f6f,
			0x00000000,0x00050005,0x00000029,0x4374756f,0x726f6c6f,0x00000000,0x00040005,0x0000002b,
			0x6f6c6f63,0x00000072,0x00050005,0x0000002e,0x74786574,0x49657275,0x00000044,0x00050005,
			0x00000030,0x49786574,0x7865646e,0x00000000,0x00050005,0x00000032,0x736e6f63,0x746e6174,
			0x00000073,0x00060006,0x00000032,0x00000000,0x6e617274,0x726f6673,0x0000006d,0x00040005,
			0x00000034,0x7274616d,0x00007869,0x00050048,0x0000000b,0x00000000,0x0000000b,0x00000000,
			0x00050048,0x0000000b,0x00000001,0x0000000b,0x00000001,0x00050048,0x0000000b,0x00000002,
			0x0000000b,0x00000003,0x00050048,0x0000000b,0x00000003,0x0000000b,0x00000004,0x00030047,
			0x0000000b,0x00000002,0x00040048,0x00000011,0x00000000,0x00000005,0x00050048,0x00000011,
			0x00000000,0x00000023,0x00000000,0x00050048,0x00000011,0x00000000,0x00000007,0x00000010,
			0x00030047,0x00000011,0x00000002,0x00040047,0x00000019,0x0000001e,0x00000000,0x00040047,
			0x00000024,0x0000001e,0x00000000,0x00040047,0x00000025,0x0000001e,0x00000001,0x00040047,
			0x00000029,0x0000001e,0x00000001,0x00040047,0x0000002b,0x0000001e,0x00000002,0x00030047,
			0x0000002e,0x0000000e,0x00040047,0x0000002e,0x0000001e,0x00000002,0x00040047,0x00000030,
			0x0000001e,0x00000003,0x00040048,0x00000032,0x00000000,0x00000005,0x00050048,0x00000032,
			0x00000000,0x00000023,0x00000000,0x00050048,0x00000032,0x00000000,0x00000007,0x00000010,
			0x00030047,0x00000032,0x00000002,0x00040047,0x00000034,0x00000022,0x00000000,0x00040047,
			0x00000034,0x00000021,0x00000001,0x00020013,0x00000002,0x00030021,0x00000003,0x00000002,
			0x00030016,0x00000006,0x00000020,0x00040017,0x00000007,0x00000006,0x00000004,0x00040015,
			0x00000008,0x00000020,0x00000000,0x0004002b,0x00000008,0x00000009,0x00000001,0x0004001c,
			0x0000000a,0x00000006,0x00000009,0x0006001e,0x0000000b,0x00000007,0x00000006,0x0000000a,
			0x0000000a,0x00040020,0x0000000c,0x00000003,0x0000000b,0x0004003b,0x0000000c,0x0000000d,
			0x00000003,0x00040015,0x0000000e,0x00000020,0x00000001,0x0004002b,0x0000000e,0x0000000f,
			0x00000000,0x00040018,0x00000010,0x00000007,0x00000004,0x0003001e,0x00000011,0x00000010,
			0x00040020,0x00000012,0x00000009,0x00000011,0x0004003b,0x00000012,0x00000013,0x00000009,
			0x00040020,0x00000014,0x00000009,0x00000010,0x00040017,0x00000017,0x00000006,0x00000002,
			0x00040020,0x00000018,0x00000001,0x00000017,0x0004003b,0x00000018,0x00000019,0x00000001,
			0x0004002b,0x00000006,0x0000001b,0x00000000,0x0004002b,0x00000006,0x0000001c,0x3f800000,
			0x00040020,0x00000021,0x00000003,0x00000007,0x00040020,0x00000023,0x00000003,0x00000017,
			0x0004003b,0x00000023,0x00000024,0x00000003,0x0004003b,0x00000018,0x00000025,0x00000001,
			0x00040017,0x00000027,0x00000006,0x00000003,0x00040020,0x00000028,0x00000003,0x00000027,
			0x0004003b,0x00000028,0x00000029,0x00000003,0x00040020,0x0000002a,0x00000001,0x00000027,
			0x0004003b,0x0000002a,0x0000002b,0x00000001,0x00040020,0x0000002d,0x00000003,0x00000008,
			0x0004003b,0x0000002d,0x0000002e,0x00000003,0x00040020,0x0000002f,0x00000001,0x00000008,
			0x0004003b,0x0000002f,0x00000030,0x00000001,0x0003001e,0x00000032,0x00000010,0x00040020,
			0x00000033,0x00000002,0x00000032,0x0004003b,0x00000033,0x00000034,0x00000002,0x00050036,
			0x00000002,0x00000004,0x00000000,0x00000003,0x000200f8,0x00000005,0x00050041,0x00000014,
			0x00000015,0x00000013,0x0000000f,0x0004003d,0x00000010,0x00000016,0x00000015,0x0004003d,
			0x00000017,0x0000001a,0x00000019,0x00050051,0x00000006,0x0000001d,0x0000001a,0x00000000,
			0x00050051,0x00000006,0x0000001e,0x0000001a,0x00000001,0x00070050,0x00000007,0x0000001f,
			0x0000001d,0x0000001e,0x0000001b,0x0000001c,0x00050091,0x00000007,0x00000020,0x00000016,
			0x0000001f,0x00050041,0x00000021,0x00000022,0x0000000d,0x0000000f,0x0003003e,0x00000022,
			0x00000020,0x0004003d,0x00000017,0x00000026,0x00000025,0x0003003e,0x00000024,0x00000026,
			0x0004003d,0x00000027,0x0000002c,0x0000002b,0x0003003e,0x00000029,0x0000002c,0x0004003d,
			0x00000008,0x00000031,0x00000030,0x0003003e,0x0000002e,0x00000031,0x000100fd,0x00010038
		};
		return vertexBinary;
	}
	const std::vector<uint32_t> FragmentBinary = { 0x07230203,0x00010000,0x0008000b,0x00000022,0x00000000,0x00020011,0x00000001,0x00020011,
		0x000014b5,0x00020011,0x000014b6,0x00020011,0x000014bb,0x0008000a,0x5f565053,0x5f545845,
		0x63736564,0x74706972,0x695f726f,0x7865646e,0x00676e69,0x0006000b,0x00000001,0x4c534c47,
		0x6474732e,0x3035342e,0x00000000,0x0003000e,0x00000000,0x00000001,0x0009000f,0x00000004,
		0x00000004,0x6e69616d,0x00000000,0x00000011,0x00000019,0x0000001d,0x00000021,0x00030010,
		0x00000004,0x00000007,0x00030003,0x00000002,0x000001c2,0x00080004,0x455f4c47,0x6e5f5458,
		0x6e756e6f,0x726f6669,0x75715f6d,0x66696c61,0x00726569,0x00040005,0x00000004,0x6e69616d,
		0x00000000,0x00040005,0x00000009,0x6f6c6f63,0x00000072,0x00050005,0x0000000e,0x53786574,
		0x6c706d61,0x00737265,0x00050005,0x00000011,0x74786574,0x49657275,0x00000044,0x00060005,
		0x00000019,0x67617266,0x43786554,0x64726f6f,0x00000000,0x00060005,0x0000001d,0x4674756f,
		0x43676172,0x726f6c6f,0x00000000,0x00040005,0x00000021,0x6f436e69,0x00726f6c,0x00040047,
		0x0000000e,0x00000022,0x00000000,0x00040047,0x0000000e,0x00000021,0x00000000,0x00030047,
		0x00000011,0x0000000e,0x00040047,0x00000011,0x0000001e,0x00000002,0x00030047,0x00000013,
		0x000014b4,0x00030047,0x00000015,0x000014b4,0x00030047,0x00000016,0x000014b4,0x00040047,
		0x00000019,0x0000001e,0x00000000,0x00040047,0x0000001d,0x0000001e,0x00000000,0x00040047,
		0x00000021,0x0000001e,0x00000001,0x00020013,0x00000002,0x00030021,0x00000003,0x00000002,
		0x00030016,0x00000006,0x00000020,0x00040017,0x00000007,0x00000006,0x00000004,0x00040020,
		0x00000008,0x00000007,0x00000007,0x00090019,0x0000000a,0x00000006,0x00000001,0x00000000,
		0x00000000,0x00000000,0x00000001,0x00000000,0x0003001b,0x0000000b,0x0000000a,0x0003001d,
		0x0000000c,0x0000000b,0x00040020,0x0000000d,0x00000000,0x0000000c,0x0004003b,0x0000000d,
		0x0000000e,0x00000000,0x00040015,0x0000000f,0x00000020,0x00000000,0x00040020,0x00000010,
		0x00000001,0x0000000f,0x0004003b,0x00000010,0x00000011,0x00000001,0x00040020,0x00000014,
		0x00000000,0x0000000b,0x00040017,0x00000017,0x00000006,0x00000002,0x00040020,0x00000018,
		0x00000001,0x00000017,0x0004003b,0x00000018,0x00000019,0x00000001,0x00040020,0x0000001c,
		0x00000003,0x00000007,0x0004003b,0x0000001c,0x0000001d,0x00000003,0x00040017,0x0000001f,
		0x00000006,0x00000003,0x00040020,0x00000020,0x00000001,0x0000001f,0x0004003b,0x00000020,
		0x00000021,0x00000001,0x00050036,0x00000002,0x00000004,0x00000000,0x00000003,0x000200f8,
		0x00000005,0x0004003b,0x00000008,0x00000009,0x00000007,0x0004003d,0x0000000f,0x00000012,
		0x00000011,0x00040053,0x0000000f,0x00000013,0x00000012,0x00050041,0x00000014,0x00000015,
		0x0000000e,0x00000013,0x0004003d,0x0000000b,0x00000016,0x00000015,0x0004003d,0x00000017,
		0x0000001a,0x00000019,0x00050057,0x00000007,0x0000001b,0x00000016,0x0000001a,0x0003003e,
		0x00000009,0x0000001b,0x0004003d,0x00000007,0x0000001e,0x00000009,0x0003003e,0x0000001d,
		0x0000001e,0x000100fd,0x00010038
	};
	return FragmentBinary;
}


void celestia::ShaderObject::loadShader(const char* filepath, ShaderType shader, bool isDefaultShader)
{
	std::vector<uint32_t> byteCode;

	if (isDefaultShader)
	{
		byteCode = getDefaultShaders(shader);
	}
	else
	{
		byteCode = utils::readFile(filepath);
	}

	VkShaderModuleCreateInfo createInfo{};
	createInfo.sType = VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO;
	createInfo.codeSize = byteCode.size() * sizeof(uint32_t);
	createInfo.pCode = byteCode.data();
	
	VkShaderModule shaderModule;

	if (vkCreateShaderModule(Device::context.device, &createInfo, nullptr, &shaderModule) != VK_SUCCESS)
	{
		throw std::runtime_error("Failed to create a shader module!\n");
	}

	shaderModules.push_back(shaderModule);

	createShaderStageCreateInfo(convertToVkFlags(shader), shaderModule);
}

const std::vector<VkPipelineShaderStageCreateInfo> celestia::ShaderObject::getInfos() const
{
	return infos;
}

const VkPushConstantRange& celestia::ShaderObject::getPushConstant() const
{
	return pushConstants;
}

void celestia::ShaderObject::createShaderStageCreateInfo(VkShaderStageFlagBits stage, VkShaderModule shaderModule)
{
	VkPipelineShaderStageCreateInfo createInfo{};
	createInfo.sType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO;
	createInfo.module = shaderModule;
	createInfo.stage = stage;
	createInfo.pName = "main";
	infos.push_back(createInfo);
}

VkShaderStageFlagBits celestia::ShaderObject::convertToVkFlags(ShaderType type)
{
	switch (type)
	{
	case celestia::ShaderType::VERTEX_SHADER:
		return VK_SHADER_STAGE_VERTEX_BIT;
	case celestia::ShaderType::FRAGMENT_SHADER:
		return VK_SHADER_STAGE_FRAGMENT_BIT;
	case celestia::ShaderType::COMPUTE_SHADER:
		return VK_SHADER_STAGE_COMPUTE_BIT;
	case celestia::ShaderType::GEOMETRY_SHADER:
		return VK_SHADER_STAGE_GEOMETRY_BIT;
	default:
		break;
	}

	std::cout << "FAILED TO CONVERT VK_FLAGS!\n";
	return VK_SHADER_STAGE_ALL_GRAPHICS;
}