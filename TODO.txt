Tee samanlainen kirjasto kuin esim SFML

mitä pitää tehdä siis:

Vulkanilla 2D rendering sharttings
windows.h api käytä ikkunaan.
Kirjoita oma tapa soittaa musiikkia
Oma matikka kirjasto????




https://www.reddit.com/r/GraphicsProgramming/comments/p4j3ar/vulkan_what_is_the_correct_way_of_minimizing_draw/



void Renderer::DrawSprite(float x, float y, float width, float height) {
    std::array<uint16_t, 6> indices {0, 1, 3,  3, 1, 2};
    std::array<Vertex, 4> vertices {{
        {{x, y}, m_currentColor, {m_currentTextureWindow.x0, m_currentTextureWindow.y0}},
        {{x, y + height}, m_currentColor, {m_currentTextureWindow.x0, m_currentTextureWindow.y1}},
        {{x + width, y + height}, m_currentColor, {m_currentTextureWindow.x1, m_currentTextureWindow.y1}},
        {{x + width, y}, m_currentColor, {m_currentTextureWindow.x1, m_currentTextureWindow.y0}},
    }};

    DrawTriangles(indices.data(), indices.size(), vertices.data(), vertices.size());




Kokeillaan Valmiina olevalla piirtämis tavalla




KÄYTÄ YHTÄ VERTEX BUFFERIA!! 
päivitä sitä per frame


BeginRenderPass funktio ottaa Vec3i structin joka kuvaa clear väriä.

Tee funktio uuden shader parametrien tekemiseen eli uus pipeline ja shaderModule.

muuta draw funktio siten että se ottaa vastaan halutun objectin ja piirtää sen.

varmaan joudutaan käyttämään sprite atlas tai se vulkanin sprite layer homma



----------

Material structiin -> VkDescriptorSet textureSet{VK_NULL_HANDLE};

Uus struct Texture:

struct Texture
{
	AllocatedImage image;
	VkImageView imageView;
};


Kun vaihdetaan tekstuuria niin tehään us VkWriteDescriptorSet struct ja sit päivitetään käyttämällä vkUpdateDescriptorSets(), jonka jälkee bindataan uudelleen se.


